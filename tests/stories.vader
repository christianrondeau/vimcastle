After (clean random):
  call vimcastle#utils#resetrnd()

Execute (initialize):
  let testutils = vimcastle#testutils#create()
  let storyname = 'main'
  let scenes = {}
  execute 'let scenenames = vimcastle#stories#' . storyname . '#index#scenes()'
  for scenename in scenenames
    let scenes[scenename] = vimcastle#scene#load(storyname, scenename)
  endfor

Execute (invoke all events):
  call vimcastle#utils#setnextrnd(2)
  let game = testutils.givengame('main', 1)
  for scenename in keys(scenes)
    let scene = scenes[scenename]
    Log 'Scene: ' . scenename . ' (level ' . scene.info.level . ')'
    " EVENTS
    for event in scene.events.items
      try
        call event.value.invoke(game)
      catch
        throw 'Scene "' . storyname . '/' . scenename . '" has an error: ' . v:exception
      endtry
    endfor
    " EQUIPPABLES
    try
      let equippables = []
      try
        let f = 'vimcastle#stories#' . storyname . '#' . scenename . '#weapons#get'
        let repo = {}
        execute 'let repo = ' . f . '()'
        let equippables += repo.items
      catch
      endtry
      try
        let f = 'vimcastle#stories#' . storyname . '#' . scenename . '#armors#get'
        let repo = {}
        execute 'let repo = ' . f . '()'
        let equippables += repo.items
      catch
      endtry
      for equippablegen in equippables
        let equippable = equippablegen.value.invoke()
        Log '  Equippable (' . equippable.slot . '): ' . equippable.name.long . ' - score: ' . equippable.score
      endfor
    catch
      throw 'Scene "' . storyname . '/' . scenename . '" has an erroneous equippable: ' . v:exception
    endtry
    " MONSTERS
    let f = 'vimcastle#stories#' . storyname . '#' . scenename . '#monsters#get'
    try
      let repo = {}
      execute 'let repo = ' . f . '()'
      for monstergen in repo.items
        let monster = monstergen.value.invoke()
        let tempgame = testutils.givengame(storyname, scene.info.level)
        let stats = testutils.autofight(tempgame, monster)
        if(tempgame.player.health <= 0)
          throw 'Scene "' . storyname . '/' . scenename . '" has a monster that is too difficult: ' . monster.name
        endif
        let difficulty = 100 - (tempgame.player.health * 100 / tempgame.player.getmaxhealth())
        let difficultyname = ''
        if(difficulty < 15)
          let difficultyname = 'EASY'
        elseif(difficulty < 30)
          let difficultyname = 'MEDIUM'
        elseif(difficulty < 50)
          let difficultyname = 'HARD'
        else
          let difficultyname = 'EXTREME'
        endif
        Log '  Monster: ' . monster.name . ' (lvl ' . monster.level . ') - turns: ' . len(stats.log) . ', hp: ' . tempgame.player.health . '/' . tempgame.player.getmaxhealth() . ' - Difficulty: ' . difficulty . '% (' . difficultyname . ')'
      endfor
    catch
      throw 'Scene "' . storyname . '/' . scenename . '" has an erroneous monsters: ' . v:exception
    endtry
  endfor
