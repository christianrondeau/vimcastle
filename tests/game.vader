Execute (setup game):
  let game = vimcastle#game#create()

Execute (enter):
  call game.enter('test')

Then (screen is updated):
  AssertEqual 'test', game.screen
  AssertEqual 'Test Action', game.actions.bindings[0].label, 'game impl is called'

Execute (action):
  call game.action('1')

Then (the action is called):
  AssertEqual ['action_test_1'], game.log

Execute (properties than can be included in tests):
  let game.player = {}
  let game.player.equipment = {}
  let game.player.equipment.weapon = { 'name': 'Sword' }
  let game.enemy = { 'name': 'Blob' }
  let game.enemy.equipment = {}
  let game.enemy.equipment.weapon = { 'name': 'Glue' }
  let msg = game.msg('Player Weapon: %<player.weapon>, Enemy: %<enemy.name>, Enemy Weapon: %<enemy.weapon>')

Then (message is created):
  AssertEqual 'Player Weapon: <Sword>, Enemy: <Blob>, Enemy Weapon: <Glue>', msg

Execute (reset):
  let game.player = {}
  let game.enemy = {}
  call game.reset()

Then (the game is clean):
  Assert !has_key(game, 'player'), 'player is cleared'
  Assert !has_key(game, 'enemy'), 'enemy is cleared'
  Assert !len(game.log), 'log is empty'
  Assert !len(game.actions.bindings), 'actions are empty'
  Assert !len(game.actions.bindings), 'actions are empty'

Execute (add logs):
  call game.clearlog()
  call game.addlog('Line 1')
  call game.addlogrnd(['Line 2'])
  call game.addlog(['Line 3', 'Line 4'])

Then (logs are added):
  AssertEqual ['Line 1', 'Line 2', ['Line 3', 'Line 4']], game.log

