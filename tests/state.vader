Execute (setup state):
  let state = vimcastle#state#create()

Execute (enter):
  call state.enter('test')

Then (screen is updated):
  AssertEqual 'test', state.screen, 'screen is updated'
  AssertEqual 'Test Action', state.actions.items[0].label, 'state impl is called'

Execute (action):
  let result = state.action('1')

Then (the action is called):
  Assert result
  AssertEqual 'test log 1', state.log[0]

Execute (default nav):
  let result = state.action('x')

Then (the default nav is called):
  Assert result
  AssertEqual 'test log any', state.log[0]

Execute (properties than can be included in tests):
  let state.player = {}
  let state.player.equipment = {}
  let state.player.equipment.weapon = { 'name': { 'long': 'Sword' } }
  let state.enemy = { 'name': { 'long': 'Blob' } }
  let state.enemy.equipment = {}
  let state.enemy.equipment.weapon = { 'name': { 'long': 'Glue' } }
  let msg = state.msg('Player Weapon: %<player.weapon>, Enemy: %<enemy.name>, Enemy Weapon: %<enemy.weapon>')

Then (message is created):
  AssertEqual 'Player Weapon: <Sword>, Enemy: <Blob>, Enemy Weapon: <Glue>', msg

Execute (reset):
  let state.player = {}
  let state.enemy = {}
  call state.reset()

Then (the state is clean):
  Assert !has_key(state, 'player'), 'player is cleared'
  Assert !has_key(state, 'enemy'), 'enemy is cleared'
  Assert !len(state.log), 'log is empty'
  Assert !len(state.nav.items), 'actions are empty'
  Assert !len(state.actions.items), 'actions are empty'
