Execute (state mock):
  let state = vimcastle#state#create()

Execute (create simple event):
  let event = vimcastle#event#create('test').text('wow!').explore('Continue')

Then (event is created):
  AssertEqual 'test', event.name

Execute (event executes):
  call event.invoke(state)

Then (state is updated):
  AssertEqual ['wow!'], state.log
  AssertEqual 'Continue', state.actions.getByKey('c').label

Execute (create fight event):
  let monsters = vimcastle#repository#create()
  function! s:monster_test()
    return vimcastle#character#create('imp', 0, 0, {})
  endfunction
  call monsters.add(1, function('s:monster_test'))
  let event = vimcastle#event#create('test').text('There is a %e before you!').fight('Fight', monsters)

Execute (event executes):
  call event.invoke(state)

Then (state is updated):
  AssertEqual ['There is a <imp> before you!'], state.log
  AssertEqual 'Fight', state.actions.getByKey('f').label

Execute (create change scene event):
  let monsters = vimcastle#repository#create()
  let event = vimcastle#event#create('test').text('change scene').enterscene('Enter Test Scene', 'testscene')

Execute (event executes):
  call event.invoke(state)

Then (state is updated):
  AssertEqual ['change scene'], state.log
  AssertEqual 'Enter Test Scene', state.actions.getByKey('e').label
