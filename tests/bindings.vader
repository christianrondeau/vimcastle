Execute (setup bindings):
  let bindings = vimcastle#bindings#create()

Then (key not found):
  AssertEqual [], bindings.display
  Assert bindings.invokeByKey('z', {}) == 0, 'Key not found should return 0'

Execute (setup binding):
  function! Vimcastle_test_binding(state)
    let a:state.called = 1
  endfunction

Execute (add):
  call bindings.add('x', 'Do it!', function('Vimcastle_test_binding'))

Then (has display info):
  AssertEqual [{ 'key': 'x', 'label': 'Do it!'}], bindings.display
  
Execute (invoke):
  let g:test_state = { 'called': 0 }
  call bindings.invokeByKey('x', g:test_state)

Then (called):
  Assert g:test_state.called, 'Should call function'

Execute (clear):
  call bindings.clear()

Then (key not found):
  AssertEqual [], bindings.display
  Assert bindings.invokeByKey('x', {}) == 0, 'Key not found should return 0'

Execute (addDefault):
  call bindings.addDefault('...', function('Vimcastle_test_binding'))

Execute (invokeDefault):
  let g:test_state = {}
  call bindings.invokeDefault(g:test_state)

Then (invokeDefault):
  Assert g:test_state.called, 'Should call function'
