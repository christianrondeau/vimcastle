After (clean random):
  call vimcastle#utils#resetrnd()

Execute (setup):
  let attacker = vimcastle#character#create({ 'short': 'A.', 'long': 'Attacker' }, 100)
  let defender = vimcastle#character#create({ 'short': 'D.', 'long': 'Defender' }, 100)

Execute (simple resolution):
  let dmg = vimcastle#resolver#hit(attacker, defender)

Then:
  AssertEqual 0, dmg

Execute (randomized weapon damage):
  call attacker.equip(vimcastle#equippablegen#weapon('Swd.', 'Sword', 4, 8).invoke())
  call vimcastle#utils#resetrnd()
  call vimcastle#utils#setnextrnd([2, 100, 0])
  let dmg = vimcastle#resolver#hit(attacker, defender)

Then:
  AssertEqual 6, dmg

Execute (simple weapon damage):
  call attacker.equip(vimcastle#equippablegen#weapon('Swd.', 'Sword', 3, 3).invoke())
  call vimcastle#utils#resetrnd()
  call vimcastle#utils#setnextrnd([0, 100, 0])
  let dmg = vimcastle#resolver#hit(attacker, defender)

Then:
  AssertEqual 3, dmg

Execute (defense reduces damage):
  call defender.equip(vimcastle#equippablegen#armor('Arm.', 'Armor', 2).invoke())
  call vimcastle#utils#resetrnd()
  call vimcastle#utils#setnextrnd([0, 100, 0])
  let dmg = vimcastle#resolver#hit(attacker, defender)

Then:
  AssertEqual 1, dmg

Execute (strength increases damage):
  call attacker.setstat('str', 4)
  call vimcastle#utils#resetrnd()
  call vimcastle#utils#setnextrnd([0, 100, 0])
  let dmg = vimcastle#resolver#hit(attacker, defender)

Then:
  AssertEqual 5, dmg

Execute (dex increases crit chances):
  call attacker.setstat('dex', 4)
  call vimcastle#utils#resetrnd()
  call vimcastle#utils#setnextrnd([0, 4, 0])
  let dmg = vimcastle#resolver#hit(attacker, defender)

Then:
  AssertEqual '10 critical', dmg
