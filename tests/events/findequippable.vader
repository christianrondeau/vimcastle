Execute (create event):
  let state = vimcastle#state#create()
  let playerequippable = vimcastle#equippablegen#weapon('Stick', 'Stick', 5, 17).stat('old', 5).stat('chg', 4)
  let state.player = vimcastle#character#create({'short':'', 'long':''}, 100).equip(playerequippable.invoke())
  let weapons = vimcastle#repository#create()
  let groundequippable = vimcastle#equippablegen#weapon('Mace', 'Mace', 15, 16).stat('new', 9).stat('chg', 7)
  call weapons.add(1, groundequippable)
  let event = vimcastle#event#create('test')
    \.findequippable(weapons)
    \.text('You see a weapon rack with a %<ground>')

Execute (invoke):
  call event.invoke(state)

Then (state is updated):
  AssertEqual [
  \ 'You see a weapon rack with a <Mace>',
  \ '  * dmg: 15 (+10) - 16 (-1)',
  \ '  * chg: 7 (+3)',
  \ '  * new: 9 (+9)',
  \ '  * old: 0 (-5)',
  \], state.log

Execute (equip weapon):
  let state.scene = vimcastle#scene#create()
  call state.scene.events.add(1, event)
  call state.actions().invokeByKey('e', state)

Then (weapon is equipped):
  AssertEqual 'Mace', state.player.equipment.weapon.name.long
