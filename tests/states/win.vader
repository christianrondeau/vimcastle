Execute (under level setup):
  let game = vimcastle#game#create()
  let player = vimcastle#character#create('Player', 100)
  let player.level = 1
  let player.xp = 5
  let game.player = player
  let enemy = vimcastle#monstergen#create('Monster')
  let enemy.xp = 4
  let game.enemy = enemy
  call game.enter('win')

Then (has actions, log and xp):
  AssertEqual ['You gained:', '  * 4 xp! (9/10 xp)'], game.log
  AssertEqual [{'label': 'Continue', 'name': 'continue', 'key': 'c'}], game.actions.bindings
  AssertEqual 9, player.xp
  AssertEqual 1, player.level
  Assert !has_key(game, 'enemy')

Execute (continue):
  let game.scene = {}
  let game.scene.events = vimcastle#repository#create().add(1, vimcastle#eventgen#create('empty'))
  let game.event = vimcastle#eventgen#create('test').invoke(game)
  call game.action('c')

Then (next action is invoked):
  AssertEqual 'explore', game.screen

Execute (over level setup):
  let enemy = vimcastle#monstergen#create('Monster')
  let enemy.xp = 4
  let game.enemy = enemy
  call game.enter('win')

Then (has actions, log and xp):
  AssertEqual ['You gained:', '  * 4 xp! (13/10 xp)'], game.log
  AssertEqual [{'label': 'Level up!', 'name': 'levelup', 'key': 'u'}], game.actions.bindings
  AssertEqual 13, player.xp
  AssertEqual 1, player.level, 'Player levels up in levelup screen'

Execute (level up):
  call game.action('u')

Then (level up screen):
  AssertEqual 'levelup', game.screen
