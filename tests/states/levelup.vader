Execute (setup):
  let game = vimcastle#game#create()
  let player = vimcastle#character#create('Player', 50)
    \.setstat('con', 2)
    \.setstat('str', 3)
    \.setstat('spd', 4)
    \.setstat('dex', 5)
  let player.level = 1
  let player.xp = 22
  let game.player = player
  call game.enter('levelup')

Then (has actions):
  AssertEqual ['Your health was replenished! Select a skill to increase.'], game.log
  AssertEqual [
    \ {'name': 'incr_con', 'label': 'Increase con 2 -> 3', 'key': '1'},
    \ {'name': 'incr_str', 'label': 'Increase str 3 -> 4', 'key': '2'},
    \ {'name': 'incr_spd', 'label': 'Increase spd 4 -> 5', 'key': '3'},
    \ {'name': 'incr_dex', 'label': 'Increase dex 5 -> 6', 'key': '4'}
    \], game.actions.bindings

Execute (increase con):
  call game.action('1')

Then (health increases, another level):
  let player.level = 2
  let player.xp = 22
  AssertEqual 3, player.getstat('con', 0)
  AssertEqual 65, player.getmaxhealth()
  AssertEqual 65, player.health
  AssertEqual ['Your health was replenished! Select a skill to increase.'], game.log
  AssertEqual [
    \ {'name': 'incr_con', 'label': 'Increase con 3 -> 4', 'key': '1'},
    \ {'name': 'incr_str', 'label': 'Increase str 3 -> 4', 'key': '2'},
    \ {'name': 'incr_spd', 'label': 'Increase spd 4 -> 5', 'key': '3'},
    \ {'name': 'incr_dex', 'label': 'Increase dex 5 -> 6', 'key': '4'}
    \], game.actions.bindings

Execute (increase dex):
  let game.scene = {}
  let game.scene.events = vimcastle#repository#create().add(1, vimcastle#eventgen#create())
  let game.event = vimcastle#eventgen#create().invoke(game)
  call game.action('4')

Then (dex increases, return to explore):
  let player.level = 3
  let player.xp = 22
  AssertEqual 6, player.getstat('dex', 0)
  AssertEqual 'explore', game.screen
