Execute (setup):
  let game = vimcastle#game#create()
  call game.enter('use')

Then (has actions):
  AssertEqual [{'name': 'back', 'label': 'Back', 'key': 'b'}], game.actions.bindings

Execute (go back):
  call game.action('b')
  AssertEqual 'inventory', game.screen

Execute (setup with items):
  let game.player = vimcastle#character#create('Player', 100)
  let game.player.items = [
  \  {'label': 'Potion of DOOM', 'effect': 'heal', 'value': 5}, 
  \  {'label': 'Scroll of zoom', 'effect': 'none'}
  \]
  call game.enter('use')

Then (has actions):
  AssertEqual [
  \  {'name': 'use_1', 'label': 'Use <Potion of DOOM>', 'key': '1'}, 
  \  {'name': 'use_2', 'label': 'Use <Scroll of zoom>', 'key': '2'}, 
  \  {'name': 'back', 'label': 'Back', 'key': 'b'}
  \], game.actions.bindings
  AssertEqual ['Select an item to use:'], game.log

Execute (use item keeps if unusable):
  call game.action('1')
  AssertEqual 'use', game.screen
  AssertEqual 2, len(game.player.items)
  AssertEqual ['Use: <Potion of DOOM>', 'Your health is already full!', 'Select an item to use:'], game.log

Execute (use item removes if usable):
  let game.player.health = 10
  call game.action('1')
  AssertEqual 'use', game.screen
  AssertEqual 1, len(game.player.items)
  AssertEqual 'Scroll of zoom', game.player.items[0].label
  AssertEqual ['Use: <Potion of DOOM>', 'You gain <+5> health.', 'Select an item to use:'], game.log

Execute (item returns to fight if enemy):
  let game.enemy = vimcastle#monstergen#create('Monster').invoke()
  call game.action('1')
  AssertEqual [
  \  {'name': 'back', 'label': 'Return to fight', 'key': 'b'}
  \], game.actions.bindings
  call game.action('b')
  AssertEqual 'fight', game.screen

Execute (back returns to inventory if no enemy):
  unlet game.enemy
  let game.event = vimcastle#eventgen#create('test').invoke(game)
  call game.enter('use')
  call game.action('b')
  AssertEqual 'inventory', game.screen

